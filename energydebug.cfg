[dielectric]
    # Relative permittivity of the dielectric(s):
    eps =  0.2000E+01

    # Whether a dielectric is present on the left and right:
    present = F F

    # Width of the dielectric(s) in (m):
    width =  0.1000E-02

[domain]
    # Length of the domain:
    length =  0.4000E-02

    # Number of cells in the domain:
    nx = 1000

[dt]
    # Initial time step (s):
    initial =  0.3000E-11

    # Maximal time step (s):
    max =  0.3000E-12

    # Minimal time step (s):
    min =  0.3000E-12

[end]
    # End iteration:
    iteration = 2147483647

    # End time (s):
    time =  0.4500E-08

[fluid]
    # Input file with cross sections:
    #input_file = 'input/n2_transport_data_siglo.txt'
    input_file = 'input/n2_transport_data_dujko.txt'

    # Time integrator (euler, trapezoidal, rk2, rk4):
    integrator = 'rk2'

    # If true, keep the velocity constant for E > table_max_efield:
    limit_velocity = F

    # Smallest allowed density in the fluid model (1/m3):
    small_density =  0.1000E+01

    # Maximum electric field in transport coefficient table:
    table_max_efield =  0.2300E+08

    # Size of lookup table for transport coefficients:
    table_size = 1000

    use_LEA = T

    table_max_e_energy = 2.5E+02
    
    source_method = "flux"

[gas]
    # Gas components:
    components = 'N2'

    # File with cross section data:
    cross_sections = 'input/cross_sections_siglo.txt'

    # Gas components fractions:
    fractions =  0.1000E+01

    # Gas pressure in bar:
    pressure =  0.1000E+01

    # Gas temperature in Kelvin:
    temperature =  0.2930E+03

[init]
    # Initial background density (1/m^3):
    background_density =  0.0000E+00

    # Initial condition charge type (1: p.ions, -1: e-, 0: neutral):
    charge_type =  0.0000E+00

    # Initial condition density (1/m^3):
    density =  0.1000E+16

    # Initial condition location (m):
    location =  0.2000E-02

    # Type of initial condition (none, block, gaussian, exp):
    type = 'gaussian'

    # Initial condition width (m):
    width =  0.2500E-04

[ion]
    # Diffusion coefficient for ions (m^2/s):
    diffusion =  0.2000E-04

    # Mobility for ions (m^2/Vs):
    mobility =  0.2000E-03

    # Secondary emission yield for ions:
    se_yield =  0.1000E-01

    # Whether ion transport is included:
    transport = T

# Type of model. Can be particle or fluid:
model = 'fluid'

[output]
    # The time step for writing output:
    dt =  0.1000E-09

    # Base file name for output:
    filename = 'output/energyDebug'

[particle]
    # Maximum energy for eedf (eV):
    eedf_max_eV =  0.2000E+02

    # Number of points for eedf:
    eedf_npoints = 100

    # Min. number of initial simulation particles:
    initial_number = 10000

    # Maximum energy (eV) for particles:
    max_eV =  0.1000E+04

    # Maximum mobility to estimate dielectric relaxation time:
    max_mobility_drt =  0.2000E+00

    # The maximum number of particles:
    max_number = 10000000

    # Adapt weights if particle count increases by this factor:
    merge_increase_factor =  0.1100E+01

    # The desired number of particles per cell:
    part_per_cell =  0.1000E+03

    # Size of the lookup table for collision rates:
    table_size = 1000

    # Velocity weight factor (s) for particle merging:
    v_merge_weight =  0.1000E-11

[photons]
    # Number of secondary-emission generating photons per ionization:
    se_per_ionization =  0.0000E+00

[voltage]
    # Voltage rise time (s):
    risetime =  0.0000E+00

    # Sinusoidal voltage frequency (1/s):
    sin_freq =  0.1000E+09

    # Sinusoidal voltage amplitude (V):
    sin_v0 =  0.0000E+00

    # Voltage amplitude (V) over domain (including dielectrics):
    v0 = -0.4000E+05

